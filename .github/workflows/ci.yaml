name: GGX-Substrate-Node

# The ref given is fully-formed, meaning that for branches the format is refs/heads/<branch_name>, for pull requests it is refs/pull/<pr_number>/merge, and for tags it is refs/tags/<tag_name>
on:
  push:
    branches: [main]
    tags: [release**]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [main]

env:
  NIX_VERSION: nix-2.13.2
  NIXPKGS_CHANNEL: nixos-22.11
  CACHIX_NAME: golden-gate-ggx
  OCTOLYTICS_DIMENSION_REPOSITORY_ID: 590614152

jobs:
  build-lint-all:
    if: github.event_name == 'pull_request'
    ## Run only if a PR is made for the main branch
    runs-on: buildjet-32vcpu-ubuntu-2204
    steps:
      - name: cachix-install-nix-action
        uses: cachix/install-nix-action@4b933aa7ebcc94a6174cf1364864e957b4910265
        with:
          install_url: https://releases.nixos.org/nix/${{ env.NIX_VERSION }}/install
          nix_path: nixpkgs=channel:${{ env.NIXPKGS_CHANNEL }}
          extra_nix_config: |
            sandbox = relaxed
            narinfo-cache-negative-ttl = 0      
            system-features = kvm
            http2 = true
      - name: cachix-cachix-action
        uses: cachix/cachix-action@c061ae84bf58b6c0afa0c252373498c25a5e86f8
        with:
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          name: ${{ env.CACHIX_NAME }}
      - name: nix-channel-env
        run: |  
          nix-channel --add https://nixos.org/channels/${{ env.NIXPKGS_CHANNEL }} nixpkgs
          nix-channel --update
          nix profile install nixpkgs#git
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
      - run: nix build --log-lines 100 .#lint-all

  docker-build-push-sydney:
    if: github.event_name == 'pull_request'
    ## Run only if a PR is made for the main branch
    needs: build-lint-all
    runs-on: buildjet-32vcpu-ubuntu-2204
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          ## This has to be either 'us-east-1' or 'us-west-2' for public ECR

      - name: Log in to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Check out code
        uses: actions/checkout@v3

      - name: Set Image Tag
        run: echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

      - name: Build, tag, and upload the docker image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: c6u3u5c0
          REPOSITORY: golden-gate-node
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:sydney-$SHORT_SHA -f Dockerfile.sydney .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:sydney-$SHORT_SHA

      - name: Store Image Tag on AWS S3
        env:
          S3_BUCKET: ggx-docker-image-tags
        run: |
          echo "Uploading Docker Image Tag to S3 Bucket as this workflow's artifact"
          echo "$SHORT_SHA" > sydney_version
          aws --region eu-central-1 s3 cp sydney_version s3://$S3_BUCKET/sydney_version
          echo "This image will be used in the future deployments.."

      - name: Log out of Amazon ECR
        run: docker logout ${{ steps.login-ecr-public.outputs.registry }}

  docker-build-push-brooklyn:
    if: github.event_name == 'pull_request'
    ## Run only if a PR is made for the main branch
    needs: build-lint-all
    runs-on: buildjet-32vcpu-ubuntu-2204
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          ## This has to be either 'us-east-1' or 'us-west-2' for public ECR

      - name: Log in to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Check out code
        uses: actions/checkout@v3

      - name: Set Image Tag
        run: echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

      - name: Build, tag, and upload the docker image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: c6u3u5c0
          REPOSITORY: golden-gate-node
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:brooklyn-$SHORT_SHA -f Dockerfile.brooklyn .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:brooklyn-$SHORT_SHA

      - name: Store Image Tag on AWS S3
        env:
          S3_BUCKET: ggx-docker-image-tags
        run: |
          echo "Uploading Docker Image Tag to S3 Bucket as this workflow's artifact"
          echo "$SHORT_SHA" > brooklyn_version
          aws --region eu-central-1 s3 cp brooklyn_version s3://$S3_BUCKET/brooklyn_version
          echo "This image will be used in the future deployments.."

      - name: Log out of Amazon ECR
        run: docker logout ${{ steps.login-ecr-public.outputs.registry }}


  deploy-brooklyn-dev:
    if: startsWith(github.ref, 'refs/tags/prerelease-brooklyn')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Get Image Tag
        env:
          S3_BUCKET: ggx-docker-image-tags
        run: |
          aws s3 cp s3://$S3_BUCKET/brooklyn_version brooklyn_version
          echo "TAG=$(cat brooklyn_version)" >> $GITHUB_ENV

      - name: ArgoCD Deployment
        run: |
          echo "Docker Image for this deployment is: $TAG"
          echo "will be impletemented after EKS provisioning"

      - name: Store Image Tag on AWS S3
        env:
          S3_BUCKET: ggx-docker-image-tags
        run: |
          echo "$TAG" > release_brooklyn 
          aws s3 cp release_brooklyn s3://$S3_BUCKET/release_brooklyn
          echo "This image will be used in future production deployments.."


  deploy-sydney-dev:
    if: startsWith(github.ref, 'refs/tags/prerelease-sydney')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Get Image Tag
        env:
          S3_BUCKET: ggx-docker-image-tags
        run: |
          aws s3 cp s3://$S3_BUCKET/sydney_version sydney_version
          echo "TAG=$(cat sydney_version)" >> $GITHUB_ENV

      - name: ArgoCD Deployment
        run: |
          echo "Docker Image for this deployment is: $TAG"
          echo "will be impletemented after EKS provisioning"

      - name: Store Image Tag on AWS S3
        env:
          S3_BUCKET: ggx-docker-image-tags
        run: |
          echo "$TAG" > release_sydney
          aws s3 cp release_sydney s3://$S3_BUCKET/release_sydney
          echo "This image will be used in future production deployments.."


  deploy-brooklyn-prod:
    if: startsWith(github.ref, 'refs/tags/release-brooklyn')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Get Image Tag
        env:
          S3_BUCKET: ggx-docker-image-tags
        run: |
          aws s3 cp s3://$S3_BUCKET/release_brooklyn release_brooklyn
          echo "TAG=$(cat release_brooklyn)" >> $GITHUB_ENV

      - name: ArgoCD Deployment
        run: |
          echo "Docker Image for this deployment is: $TAG"
          echo "will be impletemented after EKS provisioning"


  deploy-sydney-prod:
    if: startsWith(github.ref, 'refs/tags/release-sydney')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Get Image Tag
        env:
          S3_BUCKET: ggx-docker-image-tags
        run: |
          aws s3 cp s3://$S3_BUCKET/release_sydney release_sydney
          echo "TAG=$(cat release_sydney)" >> $GITHUB_ENV

      - name: ArgoCD Deployment
        run: |
          echo "Docker Image for this deployment is: $TAG"
          echo "will be impletemented after EKS provisioning"
