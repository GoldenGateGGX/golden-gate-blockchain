name: GGX-Substrate-Node

# The ref given is fully-formed, meaning that for branches the format is refs/heads/<branch_name>, for pull requests it is refs/pull/<pr_number>/merge, and for tags it is refs/tags/<tag_name>
on:
  push:
    branches: [main]
    tags: [release**]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [main]

jobs:
  docker-build-push:
    if: github.event_name == 'pull_request'
    ## Run only if a PR is made for the main branch
    runs-on: buildjet-32vcpu-ubuntu-2204
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          ## This has to be either 'us-east-1' or 'us-west-2' for public ECR

      - name: Log in to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Check out code
        uses: actions/checkout@v3

      - name: Set Image Tag
        run: echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

      - name: Build, tag, and upload the docker image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: f8n4k6v0
          REPOSITORY: golden-gate-node
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$SHORT_SHA -f Dockerfile .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$SHORT_SHA

      - name: Store Image Tag on AWS S3
        env:
          S3_BUCKET: ggx-docker-image-tags
        run: |
          echo "Uploading Docker Image Tag to S3 Bucket as this workflow's artifact"
          echo "$SHORT_SHA" > latest
          aws --region eu-central-1 s3 cp latest s3://$S3_BUCKET/latest
          echo "This image will be used in the future deployments.."

      - name: Log out of Amazon ECR
        run: docker logout ${{ steps.login-ecr-public.outputs.registry }}

  deploy-dev:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Get Image Tag
        env:
          S3_BUCKET: ggx-docker-image-tags
        run: |
          aws s3 cp s3://$S3_BUCKET/latest latest
          echo "TAG=$(cat latest)" >> $GITHUB_ENV

      - name: ArgoCD Deployment
        run: |
          echo "Docker Image for this deployment is: $TAG"
          echo "will be impletemented after EKS provisioning"

  deploy-prod:
    if: startsWith(github.ref, 'refs/tags/release')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Get Image Tag
        env:
          S3_BUCKET: ggx-docker-image-tags
        run: |
          aws s3 cp s3://$S3_BUCKET/latest latest
          echo "TAG=$(cat latest)" >> $GITHUB_ENV

      - name: ArgoCD Deployment
        run: |
          echo "Docker Image for this deployment is: $TAG"
          echo "will be impletemented after EKS provisioning"
