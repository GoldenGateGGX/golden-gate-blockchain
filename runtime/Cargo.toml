[package]
name = "golden-gate-runtime"
version = "0.0.0"
license = "Unlicense"
description = "A fresh FRAME-based Substrate runtime, ready for hacking."
publish = false
authors = { workspace = true }
edition = { workspace = true }
repository = { workspace = true }

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
scale-codec = { package = "parity-scale-codec", workspace = true }
scale-info = { workspace = true }
serde = { workspace = true, features = ["derive"] }

# Substrate
sp-api = { workspace = true }
sp-block-builder = { workspace = true }
sp-consensus-aura = { workspace = true }
sp-core = { workspace = true }
sp-inherents = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-staking = { workspace = true }
sp-std = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-version = { workspace = true }
# Substrate FRAME
frame-benchmarking = { workspace = true, optional = true }
frame-election-provider-support = { workspace = true }
frame-executive = { workspace = true }
frame-support = { workspace = true }
frame-system = { workspace = true }
frame-system-benchmarking = { workspace = true, optional = true }
frame-system-rpc-runtime-api = { workspace = true }
pallet-aura = { workspace = true }
pallet-balances = { workspace = true }
pallet-bounties = { workspace = true }
pallet-grandpa = { workspace = true }
pallet-identity = { workspace = true }
pallet-indices = { workspace = true }
pallet-multisig = { workspace = true }
pallet-proxy = { workspace = true }
pallet-session = { workspace = true }
pallet-staking = { workspace = true }
pallet-staking-reward-curve = { workspace = true }
pallet-sudo = { workspace = true }
pallet-timestamp = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
pallet-treasury = { workspace = true }
pallet-vesting = { workspace = true }

# Frontier
fp-rpc = { workspace = true }
fp-self-contained = { workspace = true }

# Frontier FRAME
pallet-base-fee = { workspace = true }
pallet-dynamic-fee = { workspace = true }
pallet-ethereum = { workspace = true }
pallet-evm = { workspace = true, features = ["forbid-evm-reentrancy"] }
pallet-evm-chain-id = { workspace = true }
pallet-evm-precompile-blake2 = { workspace = true }
pallet-evm-precompile-bn128 = { workspace = true }
pallet-evm-precompile-ed25519 = { workspace = true }
pallet-evm-precompile-modexp = { workspace = true }
pallet-evm-precompile-sha3fips = { workspace = true }
pallet-evm-precompile-simple = { workspace = true }
pallet-evm-precompile-sr25519 = { workspace = true }
pallet-evm-precompile-substrate-ecdsa = { workspace = true }
pallet-hotfix-sufficients = { workspace = true }

# GGX
account-filter = { workspace = true }

# Astar
pallet-chain-extension-xvm = { workspace = true, default-features = false }
pallet-evm-precompile-xvm = { workspace = true, default-features = false }
pallet-xvm = { workspace = true, default-features = false, features = ["evm", "wasm"] }

# Wasm contracts
pallet-contracts = { workspace = true }
pallet-contracts-primitives = { workspace = true, default-features = false }
pallet-randomness-collective-flip = { workspace = true, default-features = false }

[build-dependencies]
substrate-wasm-builder = { workspace = true }

[dev-dependencies]
proptest = { workspace = true }
test-strategy = { workspace = true }

[features]
default = ["std", "aura", "with-rocksdb-weights"]
aura = []
manual-seal = ["with-rocksdb-weights"]
with-rocksdb-weights = []
with-paritydb-weights = []
std = [
	"scale-codec/std",
	"scale-info/std",
	"serde/std",
	# Substrate
	"sp-api/std",
	"sp-block-builder/std",
	"sp-consensus-aura/std",
	"sp-core/std",
	"sp-inherents/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-std/std",
	"sp-transaction-pool/std",
	"sp-version/std",
	# Substrate FRAME
	"frame-benchmarking/std",
	"frame-executive/std",
	"frame-support/std",
	"frame-system/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system-benchmarking/std",
	"pallet-aura/std",
	"pallet-balances/std",
	"pallet-grandpa/std",
	"pallet-sudo/std",
	"pallet-staking/std",
	"pallet-treasury/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"pallet-vesting/std",
	"pallet-indices/std",
	"pallet-multisig/std",
	"pallet-proxy/std",
	"pallet-identity/std",
	# Frontier
	"fp-rpc/std",
	"fp-self-contained/std",
	# Frontier FRAME
	"pallet-base-fee/std",
	"pallet-dynamic-fee/std",
	"pallet-ethereum/std",
	"pallet-evm/std",
	"pallet-evm-chain-id/std",
	"pallet-evm-precompile-modexp/std",
	"pallet-evm-precompile-sha3fips/std",
	"pallet-evm-precompile-simple/std",
	"pallet-hotfix-sufficients/std",
	"pallet-evm-precompile-bn128/std",
	"pallet-evm-precompile-blake2/std",
	"pallet-evm-precompile-ed25519/std",
	# GGX
	"account-filter/std",
	# Astar
	"pallet-evm-precompile-xvm/std",
	"pallet-chain-extension-xvm/std",
	"pallet-xvm/std",
	"pallet-evm-precompile-sr25519/std",
	"pallet-evm-precompile-substrate-ecdsa/std",
	# Wasm contracts
	"pallet-contracts/std",
	"pallet-contracts-primitives/std",
	"pallet-randomness-collective-flip/std",
]
runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"pallet-ethereum/runtime-benchmarks",
	"pallet-evm/runtime-benchmarks",
	"pallet-hotfix-sufficients/runtime-benchmarks",
]
