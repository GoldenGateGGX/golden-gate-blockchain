[package]
name = "golden-gate-node"
version = "0.0.1"
license = "Unlicense"
build = "build.rs"
description = "A fresh FRAME-based Substrate node, ready for hacking."
publish = false
authors.workspace = true
edition.workspace = true
repository.workspace = true

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
async-trait.workspace = true
clap = { workspace = true, features = ["derive"] }
futures.workspace = true
jsonrpsee = { workspace = true, features = ["server", "macros"] }
log.workspace = true
rand.workspace = true
scale-codec = { package = "parity-scale-codec", workspace = true }

# Substrate
mmr-gadget.workspace = true
mmr-rpc.workspace = true
sc-basic-authorship.workspace = true
sc-cli.workspace = true
sc-client-api.workspace = true
sc-consensus-aura = { workspace = true }
sc-consensus-beefy-rpc.workspace = true
sc-consensus-beefy.workspace = true
sc-consensus-grandpa.workspace = true
sc-consensus-manual-seal = { workspace = true, optional = true }
sc-consensus.workspace = true
sc-executor.workspace = true
sc-keystore.workspace = true
sc-network-sync.workspace = true
sc-network.workspace = true
sc-rpc-api.workspace = true
sc-rpc.workspace = true
sc-service.workspace = true
sc-telemetry.workspace = true
sc-transaction-pool.workspace = true
sp-api = { workspace = true, features = ["std"] }
sp-block-builder.workspace = true
sp-blockchain.workspace = true
sp-consensus-aura = { workspace = true, features = ["std"] }
sp-consensus-beefy = { workspace = true, features = ["std"] }
sp-core = { workspace = true, features = ["std"] }
sp-inherents = { workspace = true, features = ["std"] }
sp-keyring.workspace = true
sp-mmr-primitives.workspace = true
sp-runtime = { workspace = true, features = ["std"] }
sp-timestamp = { workspace = true, features = ["std"] }
# These dependencies are used for RPC
pallet-transaction-payment-rpc.workspace = true
substrate-frame-rpc-system.workspace = true
# These dependencies are used for runtime benchmarking
frame-benchmarking = { workspace = true, optional = true }
frame-benchmarking-cli = { workspace = true, optional = true }
frame-system.workspace = true
pallet-transaction-payment.workspace = true
polkadot-rpc.workspace = true

# Frontier
fc-cli = { workspace = true }
fc-consensus = { workspace = true }
fc-db = { workspace = true }
fc-mapping-sync = { workspace = true }
fc-rpc = { workspace = true }
fc-rpc-core = { workspace = true }
fc-storage = { workspace = true }
fp-dynamic-fee = { workspace = true, features = ["std"] }
fp-evm = { workspace = true, features = ["std"] }
fp-rpc = { workspace = true, features = ["std"] }
fp-storage = { workspace = true, features = ["std"] }

golden-gate-runtime-mainnet = { workspace = true, features = ["std"] }
golden-gate-runtime-testnet = { workspace = true, features = ["std"], optional = true }

[dev-dependencies]
assert_cmd = { workspace = true }
ethers = { workspace = true }
hex = { workspace = true }
nix = { workspace = true }
num-bigint = { version = "0.4", default-features = false, features = ["rand"] }
pallet-balances = { workspace = true }
serde_json = { workspace = true }
substrate-rpc-client = { workspace = true }
substrate-test-utils = { workspace = true }
tempfile = { workspace = true }
tokio = { workspace = true }
tokio-util = { workspace = true }
wait-timeout = { workspace = true }
web3 = { workspace = true }

[build-dependencies]
substrate-build-script-utils.workspace = true

[features]
default = []
testnet = [
	"golden-gate-runtime-testnet",
]
fast-runtime = [
	"golden-gate-runtime-mainnet/fast-runtime",
]
manual-seal = [
	"sc-consensus-manual-seal",
	"golden-gate-runtime-testnet?/manual-seal",
	"golden-gate-runtime-mainnet/manual-seal",
]
with-paritydb-weights = [
	"golden-gate-runtime-testnet?/with-paritydb-weights",
	"golden-gate-runtime-mainnet/with-paritydb-weights",
]
runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-benchmarking-cli/runtime-benchmarks",
	"sc-service/runtime-benchmarks",
	"golden-gate-runtime-testnet?/runtime-benchmarks",
	"golden-gate-runtime-mainnet/runtime-benchmarks",
]
